Build1=Default,com.kobe.code.arthur
File1=appIcon.png
File2=LayoutUpcomingClv.bal
File3=Main.bal
File4=semimagem.png
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
Group=Default Group
IconFile=
Library1=core
Library2=okhttp
Library3=json
Library4=stringutils
Library5=xui
Library6=javaobject
Library7=runtimepermissions
Library8=appcompat
Library9=phone
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="9" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.DarkTheme)~\n~'End of default text.~\n~~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="Theme.AppCompat.Light.NoActionBar">~\n~        <item name="colorPrimary">#3e3e3e</item>~\n~        <item name="colorPrimaryDark">#d4d1d1</item>~\n~        <item name="colorAccent">#858383</item>~\n~        <item name="windowNoTitle">true</item>~\n~        <item name="windowActionBar">false</item>~\n~    </style>~\n~</resources>~\n~)~\n~~\n~AddPermission(android.permission.WRITE_EXTERNAL_STORAGE) ' Allows an application to write to external storage.~\n~AddPermission(android.permission.READ_EXTERNAL_STORAGE) ' Allows an application to read from external storage.
Module1=Starter
Module2=HttpJob
Module3=HttpUtils2Service
Module4=CustomListView
Module5=GetImage
NumberOfFiles=4
NumberOfLibraries=9
NumberOfModules=5
Version=8.3
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Kobe Code Challenge
	#VersionCode: 1
	#VersionName: 1.0
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False	
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: False
#End Region

	#Extends: android.support.v7.app.AppCompatActivity

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
		
	Private xui As XUI
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	'These variables can only be accessed from this module.
	
	Private ToolBar As ACToolBarLight
	Dim sv As ACSearchView
	Dim itemsearch As ACMenuItem
	
	'main
	Private pnlMain As Panel
	Private clvUpcoming As CustomListView	
	Private imgUpcomingClvPoster As ImageView
	Private lblUpcomingClvName As Label
	Private lblUpcomingClvRelease As Label
	Private lblUpcomingClvGenre As Label
	
	'details
	Private pnlDetails As Panel
	Private imgDetailsMovie As ImageView
	Private lblDetailsName As Label
	Private lblDetailRelease As Label
	Private lblDetailsGenre As Label
	Private clvDetailsOverview As CustomListView
		
	'aux
	Private lastReachEndTime As Long
	Private lastPage As Int
	Private totalPages As Int	
	Private mapAuxGenres As Map
	Private mapAuxMovieInfo As Map
	
	'intro
	Private imgBackgroundIntro As Panel
	Private imgLogo1Intro As ImageView
	
	'search
	Private pnlSearch As Panel
	Private clvSearch As CustomListView	
End Sub


Sub Activity_Create(FirstTime As Boolean)
	Activity.LoadLayout("Main")
	
	' configura toolbar
	ToolBar.Title = Application.LabelName
	ToolBar.TitleTextColor = Colors.White
	ToolBar.Color = Colors.RGB(92,92,92)
	ToolBar.InitMenuListener
	sv.Initialize("Search")
	sv.IconifiedByDefault = True

	Load_Intro	
End Sub


Sub Activity_Resume

End Sub


Sub Activity_Pause (UserClosed As Boolean)

End Sub


#If Java
public boolean _onCreateOptionsMenu(android.view.Menu menu) {
    if (processBA.subExists("activity_createmenu")) {
        processBA.raiseEvent2(null, true, "activity_createmenu", false, new de.amberhome.objects.appcompat.ACMenuWrapper(menu));
        return true;
    }
    else
        return false;
}
#End If


'captura botões do telefone
Sub Activity_KeyPress (KeyCode As Int) As Boolean
	If KeyCode = KeyCodes.KEYCODE_BACK Then
		If pnlDetails.Visible Then
			pnlDetails.Visible = False
			itemsearch.Visible = True
			clvDetailsOverview.Clear
			Return True
		Else If pnlSearch.Visible Then
			pnlSearch.Visible = False			
			Return True

		Else
			Close_App
			Return True
		End If
	End If
	Return False
End Sub


'fecha app
Sub Close_App
	Msgbox2Async("Do you really want to exit the application?", Application.LabelName, "Yes", "Cancel", "", Null, False)
	Wait For Msgbox_Result (Result As Int)
	If Result = DialogResponse.POSITIVE Then		
		Sleep(0)		
		Activity.Finish		
	Else
		Return
	End If
End Sub


'carrega o splash inicial
Sub Load_Intro
	SetStatusBarColor(Colors.Black)
			
	imgBackgroundIntro.Initialize("imgBackgroundIntro")
	Activity.AddView(imgBackgroundIntro,0%x,0%y,100%x,100%y)
	imgBackgroundIntro.Color = 0xFFFFFFFF
	imgBackgroundIntro.BringToFront
	SetElevation(imgBackgroundIntro,10dip)
	

	imgLogo1Intro.Initialize("imgLogo1Intro")
	imgLogo1Intro.Visible = False
	Activity.AddView(imgLogo1Intro,30%x,30%y,40%x,40%y)
	imgLogo1Intro.Bitmap = LoadBitmapResize(File.DirAssets, "appIcon.png", imgLogo1Intro.Width, imgLogo1Intro.Height, True )
	imgLogo1Intro.Visible = True
	imgLogo1Intro.BringToFront
	SetElevation(imgLogo1Intro,11dip)
	
	Sleep(1000)
	
	'carrega o restante do app
	Load_App
End Sub


Sub Remove_Splash
	'remove as views da intro
	If imgBackgroundIntro.IsInitialized Then imgBackgroundIntro.RemoveView
	If imgLogo1Intro.IsInitialized Then imgLogo1Intro.RemoveView		
End Sub


Sub Load_App
	mapAuxGenres.Initialize
	mapAuxMovieInfo.Initialize

	lastPage = 1
	getUpcoming(lastPage)
	
	Sleep(3000)
	
	Remove_Splash
End Sub





#Region Search

'cria o item do menu para buscas
Sub Activity_CreateMenu(Menu As ACMenu)
	Menu.Clear
	itemsearch = ToolBar.Menu.Add2(1, 1, "Search", Null)
	itemsearch.SearchView=sv
End Sub

'inicia a busca a partir do termo digitado
Sub searchnow(keyword As String)
	Log("Search function with keyword is :" & keyword)
	getMovie(keyword)
End Sub


Sub Search_QuerySubmitted (Query As String)
	sv.Iconfied = True
	itemsearch.ItemCollapsed = True
	searchnow(Query)
End Sub


'busca filme
Sub getMovie(keyword As String)	
	If keyword.Length < 1 Then 
		ToastMessageShow("Invalid keyword",True)
		Return
	End If
	
	clvSearch.Clear
	
	ProgressDialogShow2("Loading...",False)
	
	Dim urlMovie As String = "?api_key="&Starter.apiKey&"&language="&Starter.language&"&query="&keyword
	
	Dim j As HttpJob
	j.Initialize("", Me)
	j.Download(Starter.urlSearch&urlMovie)
	j.GetRequest.Timeout = 10000
	Wait For (j) JobDone(j As HttpJob)
	If j.Success Then
			
		Dim parser As JSONParser
		parser.Initialize(j.GetString)
		Dim root As Map = parser.NextObject	
		Dim results As List = root.Get("results")
		For Each colresults As Map In results
			Dim title As String = colresults.Get("title")		
			Dim poster_path As String = colresults.Get("poster_path")		
			Dim release_date As String = colresults.Get("release_date")		
			Dim id As Int = colresults.Get("id")
		
			
			clvSearch.Add(createSearchItem(id,title,release_date,poster_path),id)
		Next
	
	Else
		ProgressDialogHide
		Msgbox("A connection error has occurred! Try again in a few minutes",Application.LabelName)
	End If
	
	j.Release
	
	pnlSearch.SetVisibleAnimated(250, True)
	
	ProgressDialogHide		
End Sub


'cria item na lista clvSearch
Sub createSearchItem(idMovie As Int, nameMovie As String, releaseMovie As String, posterMovieUrl As String) As B4XView
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0%x, 0%y, 100%x, 30%y)
	p.LoadLayout("LayoutUpcomingClv")
	p.Color = Colors.White
		
	lblUpcomingClvName.Text = nameMovie
	lblUpcomingClvRelease.Text = releaseMovie
		
	CallSubDelayed3(GetImage,"Baixa_Imagem",imgUpcomingClvPoster,Starter.urlPoster&"/"&posterMovieUrl)
	
	Return p
End Sub

#End Region




#Region Upcoming

'busca os generos de filmes
Sub getGenre As ResumableSub	
	Dim urlGenre As String = "list?api_key="&Starter.apiKey&"&language="&Starter.language
	Dim response As Map : response.Initialize
	
	Dim j As HttpJob
	j.Initialize("", Me)
	j.Download(Starter.urlGenre&urlGenre)
	j.GetRequest.Timeout = 10000
	Wait For (j) JobDone(j As HttpJob)
	If j.Success Then
			
		Dim parser As JSONParser
		parser.Initialize(j.GetString)
		Dim root As Map = parser.NextObject
		Dim genres As List = root.Get("genres")
		For Each colgenres As Map In genres
			Dim name As String = colgenres.Get("name")
			Dim id As Int = colgenres.Get("id")
			response.Put(id,name)
		Next
	Else	
		Msgbox("A connection error has occurred! Try again in a few minutes",Application.LabelName)
	End If
	
	j.Release
	
	Return response	
End Sub


'busca os próximos filmes que serão lançados a partir do valor de paginação fornecido
Sub getUpcoming(page As Int)	
	ProgressDialogShow2("Loading...",False)
	
	Dim urlUpcoming As String = "upcoming?api_key="&Starter.apiKey&"&language="&Starter.language&"&page="&page
	
	Dim rs As ResumableSub
	rs = getGenre
	Wait For (rs) complete (mapGenres As Map)
	
	If mapGenres.Size = 0 Then
		Log("genre error")		
	End If
	
	'envia requisição e trata o resultado		
	Dim j As HttpJob
	j.Initialize("", Me)
	j.Download(Starter.urlPrincipal&urlUpcoming)
	j.GetRequest.Timeout = 10000 
	Wait For (j) JobDone(j As HttpJob)
	If j.Success Then
			
		Dim parser As JSONParser
		parser.Initialize(j.GetString)
		Dim root As Map = parser.NextObject				
		Dim dates As Map = root.Get("dates")
		Dim maximum As String = dates.Get("maximum")
		Dim minimum As String = dates.Get("minimum")
		Dim page As Int = root.Get("page")
		Dim total_pages As Int = root.Get("total_pages")
		
		totalPages = total_pages
		Dim results As List = root.Get("results")
		For Each colresults As Map In results
			Dim overview As String = colresults.Get("overview")
			Dim original_language As String = colresults.Get("original_language")
			Dim original_title As String = colresults.Get("original_title")
			Dim video As String = colresults.Get("video")
			Dim title As String = colresults.Get("title") ' nome
			Dim genre_ids As List = colresults.Get("genre_ids") 'genre
			
			Dim genreList As List : genreList.initialize			
			For Each colgenre_ids As Int In genre_ids
				genreList.Add(mapGenres.Get(colgenre_ids))
			Next			
			
			Dim poster_path As String = colresults.Get("poster_path") 'poster
			Dim backdrop_path As String = colresults.Get("backdrop_path")
			Dim release_date As String = colresults.Get("release_date") ' lançamento
			Dim vote_average As Double = colresults.Get("vote_average")
			Dim popularity As Double = colresults.Get("popularity")
			Dim id As Int = colresults.Get("id")
			Dim adult As String = colresults.Get("adult")
			Dim vote_count As Int = colresults.Get("vote_count")
			
			clvUpcoming.Add(createUpcomingItem(id,title,release_date,poster_path,genreList),id)	'adiciona item no clvUpcoming
						
			mapAuxGenres.Put(id,lblUpcomingClvGenre.Text) 'armazena chave e valor em um mapa
						
			Dim params As List : params.initialize
			params.AddAll(Array As String(title,release_date,poster_path,overview))			
			mapAuxMovieInfo.Put(id,params)
								
		Next		
		Dim total_results As Int = root.Get("total_results")
		
	Else
		ProgressDialogHide
		Msgbox("A connection error has occurred! Try again in a few minutes",Application.LabelName)
	End If
	
	j.Release
	
	Sleep(700)
	
	Try		
		If lastPage > 1 Then 
			clvUpcoming.JumpToItem(20 * (lastPage - 1))			
		End If
	Catch
		Log(LastException.Message)
	End Try
	
	
	
	ProgressDialogHide	
End Sub


'cria item na lista clvUpcoming
Sub createUpcomingItem(idMovie As Int, nameMovie As String, releaseMovie As String, posterMovieUrl As String, genreList As List) As B4XView	
	Dim p As B4XView = xui.CreatePanel("")
	p.SetLayoutAnimated(0, 0%x, 0%y, 100%x, 30%y)
	p.LoadLayout("LayoutUpcomingClv")
	p.Color = Colors.White
		
	lblUpcomingClvName.Text = nameMovie	
	lblUpcomingClvRelease.Text = releaseMovie
	
	Try
		lblUpcomingClvGenre.Text = genreList.Get(0)
		For i = 1 To genreList.Size - 2
			lblUpcomingClvGenre.Text = lblUpcomingClvGenre.Text&", "&genreList.Get(i)
		Next
		
		If genreList.Size > 1 Then lblUpcomingClvGenre.Text = lblUpcomingClvGenre.Text&", "&genreList.Get(genreList.Size - 1)
		
	Catch
		Log(LastException.Message)
	End Try
	
	
	CallSubDelayed3(GetImage,"Baixa_Imagem",imgUpcomingClvPoster,Starter.urlPoster&"/"&posterMovieUrl)
	
	Return p	
End Sub


'captura o clique em um item da lista
Sub clvUpcoming_ItemClick (Index As Int, Value As Object)	
'	Log(Index)
	createMovieDetailsView(Value)
End Sub


'monta a view com os detalhes do filme selecionado
Sub createMovieDetailsView(Value As Object)	
	itemsearch.Visible = False
	itemsearch.ItemCollapsed = True
		
	Dim params As List : params.initialize
	params = mapAuxMovieInfo.Get(Value)
	
	lblDetailsName.Text = params.Get(0)
	lblDetailRelease.Text = params.Get(1)
	lblDetailsGenre.Text = mapAuxGenres.Get(Value)'	
	CallSubDelayed3(GetImage,"Baixa_Imagem",imgDetailsMovie,Starter.urlPoster&"/"&params.Get(2))
	clvDetailsOverview.Add(createMovieDetailsOverview(params.Get(3)), Null)
	
	pnlDetails.SetVisibleAnimated(250, True)
End Sub


'cria item no scroll overview
Sub createMovieDetailsOverview(overviewInfo As String) As B4XView	
	Dim p As B4XView = xui.CreatePanel("")
	p.Color = xui.Color_Transparent
	
	Dim lblText As Label
	lblText.Initialize("")
	lblText.Text = overviewInfo
	lblText.TextColor = 0xFF3C3C3C
	p.AddView(lblText, 1%x, 2%y, 80%x, 30%y)
	
	lblText.Height = Starter.su.MeasureMultilineTextHeight(lblText, lblText.Text) + 4%y
	
	p.SetLayoutAnimated(0, 0%x, 0%y, 100%x, lblText.Top + lblText.Height + 2%y)
		
	Return p
End Sub


'evento disparado ao chegar no final da lista clvUpcoming
Sub clvUpcoming_ReachEnd		
	If DateTime.Now < lastReachEndTime + 3 * DateTime.TicksPerSecond Then Return
	lastReachEndTime = DateTime.Now
	
	
	If lastPage >= totalPages Then Return
		
	ProgressDialogShow2("Loading...",False)
	
	lastPage = lastPage + 1
	
	'realiza requisição da próxima página de lançamentos	
	getUpcoming(lastPage)
End Sub

#End Region





#Region Clicks Vazios

Sub pnlMain_Click
	
End Sub

Sub pnlDetails_Click
	
End Sub

Sub imgBackgroundIntro_Click
	
End Sub

#End Region





#Region Utils

Sub FontAwesomeToBitmap(Text As String, FontSize As Float, FontColor As Int) As B4XBitmap 'Ignore
	Dim xui As XUI
	Dim P As Panel = xui.CreatePanel("")
	P.SetLayoutAnimated(0, 0, 0, 32dip, 32dip)
	Dim CVS1 As B4XCanvas
	CVS1.Initialize(p)
	Dim Fnt As B4XFont = xui.CreateFont(Typeface.FONTAWESOME, FontSize)
	Dim R As B4XRect = CVS1.MeasureText(Text, Fnt)
	Dim BaseLine As Int = CVS1.TargetRect.CenterY - r.Height / 2 - r.Top
	CVS1.DrawText(Text, CVS1.TargetRect.CenterX, BaseLine, Fnt, FontColor, "CENTER")
	Dim B As B4XBitmap = CVS1.CreateBitmap
	CVS1.Release
	Return B
End Sub


Sub SetStatusBarColor(clr As Int)
	Dim p As Phone
	If p.SdkVersion >= 21 Then
		Dim jo As JavaObject
		jo.InitializeContext
		Dim window As JavaObject = jo.RunMethodJO("getWindow", Null)
		window.RunMethod("addFlags", Array (0x80000000))
		window.RunMethod("clearFlags", Array (0x04000000))
		window.RunMethod("setStatusBarColor", Array(clr))
	End If
End Sub


Sub SetElevation(v As View, e As Float)
	Dim jo As JavaObject
	Dim p As Phone
   
	If p.SdkVersion >= 21 Then
		jo = v
		jo.RunMethod("setElevation", Array As Object(e))
	End If
End Sub

#End Region